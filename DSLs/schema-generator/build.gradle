apply plugin: "application"
apply plugin: "kotlin"

mainClassName = "com.fkorotkov.kubernetes.GeneratorKt"

task generateKafka(type: JavaExec, dependsOn: classes) {
    main = "com.fkorotkov.kubernetes.GeneratorKt"
    classpath = sourceSets.main.runtimeClasspath
    args "kafka", "${project(":DSLs:kafka:model").projectDir}/src/main/resources/schema.json"
}

task generateZookeeper(type: JavaExec, dependsOn: classes) {
    main = "com.fkorotkov.kubernetes.GeneratorKt"
    classpath = sourceSets.main.runtimeClasspath
    args "zookeeper", "${project(":DSLs:zookeeper:model").projectDir}/src/main/resources/schema.json"
}

task generateSyndesis(type: JavaExec, dependsOn: classes) {
    main = "com.fkorotkov.kubernetes.GeneratorKt"
    classpath = sourceSets.main.runtimeClasspath
    args "syndesis", "${project(":DSLs:syndesis:model").projectDir}/src/main/resources"
}

task generateIntegrations(type: JavaExec, dependsOn: classes) {
    main = "com.fkorotkov.kubernetes.GeneratorKt"
    classpath = sourceSets.main.runtimeClasspath
    args "/home/asmigala/tmp/camel-k-crds", "${project(":DSLs:camel-k:model").projectDir}/src/main/resources/schemas"
}

dependencies {
    compile project(":generator")

    compile libraries['com.google.code.gson:gson']
    compile libraries['com.google.code.gson:gson-extras']

    compile libraries['org.jetbrains.kotlin:kotlin-stdlib']
    compile libraries['org.jetbrains.kotlin:kotlin-reflect']

    compile libraries['io.fabric8:kubernetes-client']
    compile libraries['io.fabric8:kubernetes-model']
}
